plugins {
    id "com.github.johnrengelman.shadow" version "7.1.1"
}

configurations {
    shadowCommon
    shadowModImplementation
    modImplementation.extendsFrom shadowModImplementation
}

loom {
    launches {
        all {
            arg "-mixin.config", "mixin.imdlib.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

repositories {
    maven {
        url = "https://maven.theillusivec4.top/"
    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.mc_version}-${rootProject.forge_version}"
    modApi "me.shedaniel:architectury-forge:${rootProject.architectury_version}"

    modCompileOnly "top.theillusivec4.curios:curios-forge:1.16.5-4.0.5.3:api"
    modRuntimeOnly "top.theillusivec4.curios:curios-forge:1.16.5-4.0.5.3"

    implementation(project(path: ":common", configuration: "dev")) {
        transitive = false
    }
    developmentForge(project(path: ":common", configuration: "dev")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) {
        transitive = false
    }

    shadowModImplementation("dev.itsmeow.imdlib:imdlib-forge:${rootProject.imdlib_version}") {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon, project.configurations.shadowModImplementation]
    relocate 'dev.itsmeow.imdlib', "${rootProject.maven_group}.imdlib"
    classifier "dev-shadow"
    exclude "mixin.imdlib-${rootProject.mod_id}.json"
    exclude "architectury-common.accessWidener"
}

loom {
    forge {
        mixinConfig "mixin.imdlib-whisperwoods.json", "whisperwoods.mixins.json"
        accessTransformer file("src/main/resources/META-INF/accesstransformer.cfg")
    }
}

remapJar {
    dependsOn shadowJar
    input.set shadowJar.archiveFile
    classifier "remap"
}

task fixJar(type: Jar) {
    dependsOn remapJar
    from remapJar.archiveFile.map { zipTree(it) }
    manifest {
        from {
            zipTree(remapJar.archiveFile).find {
                it.name == "MANIFEST.MF"
            }
        }
    }
    rename("mixin.imdlib.json", "mixin.imdlib-${rootProject.mod_id}.json")
    rename("imdlib-common-refmap.json", "imdlib-${rootProject.mod_id}-common-refmap.json")
    filesMatching("mixin.imdlib.json") {
        filter {
            line ->
                {
                    line = line.replaceAll('dev.itsmeow.imdlib.mixin', "${rootProject.maven_group}.imdlib.mixin")
                    line.replaceAll('imdlib-common-refmap.json', "imdlib-${rootProject.mod_id}-common-refmap.json")
                }
        }
    }
    filesMatching("imdlib-common-refmap.json") {
        filter {
            line -> line.replaceAll('dev/itsmeow/imdlib/mixin/', "dev/itsmeow/${rootProject.mod_id}/imdlib/mixin/")
        }
    }
    classifier "forge"
}

sourcesJar.dependsOn fixJar

jar {
    classifier "dev"
    manifest {
        mainAttributes(
                "Maven-Artifact": "${rootProject.maven_group}:${rootProject.mod_id}-${project.name}:${rootProject.version}",
                "Specification-Title": rootProject.mod_id,
                "Specification-Vendor": "itsmeow",
                "Specification-Version": "1",
                "Implementation-Title": rootProject.mod_id,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "itsmeow",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                "Built-On": "${rootProject.mc_version}-${rootProject.forge_version}"
        )
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
    manifest {
        mainAttributes(
                "Maven-Artifact": "${rootProject.maven_group}:${rootProject.mod_id}-${project.name}:${rootProject.version}",
                "Specification-Title": rootProject.mod_id,
                "Specification-Vendor": "itsmeow",
                "Specification-Version": "1",
                "Implementation-Title": rootProject.mod_id,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "itsmeow",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                "Built-On": "${rootProject.mc_version}-${rootProject.forge_version}"
        )
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            pom {
                name = rootProject.name + "-" + project.name
                url = rootProject.url
                packaging = 'jar'
                scm {
                    connection = "scm:git:git://github.com/" + rootProject.github + ".git"
                    developerConnection = "scm:git:git@github.com:" + rootProject.github + ".git"
                    url = "https://github.com/" + rootProject.github
                }
                issueManagement {
                    system = 'github'
                    url = "https://github.com/" + rootProject.github + "/issues"
                }
                organization {
                    name = 'itsmeow Mods'
                    url = 'https://itsmeow.dev/'
                }
                developers {
                    developer {
                        id = 'itsmeow'
                        name = 'itsmeowdev'
                        email = 'itsmeow@itsmeow.dev'
                    }
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    def configurationNames = ["modImplementation", "modApi"]
                    configurationNames.each { configurationName ->
                        configurations[configurationName].allDependencies.each {
                            if (!(it.name in ["imdlib", "architectury-transformer", "common"]) && !(it.group in ["curse.maven"])) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                        }
                    }
                }
            }
            artifact(fixJar) {
                classifier null
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
        loom.disableDeprecatedPomGeneration(mavenForge)
    }
}